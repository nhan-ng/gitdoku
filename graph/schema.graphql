type Query {
  sudoku: Sudoku!
  refHead(id: ID!): RefHead!
  commit(id: ID!): Commit!
}

type Mutation {
  commit(input: CommitInput!): Commit!
}

type Subscription {
  commitAdded(refHeadId: ID!): Commit!
}

input CommitInput {
#  authorId: ID!
#  authorTimestamp: Time!
#  committerId: ID!
#  committerTimestamp: Time!
  refHeadId: ID!

  type: CommitType!
  row: Int!
  col: Int!
  val: Int!
}

type Commit {
  id: ID!
#  authorId: ID!
#  authorTimestamp: Time!
#  committerId: ID!
#  committerTimestamp: Time!
  parentId: ID
  parent: Commit

  blob: Blob!

  type: CommitType!
  row: Int!
  col: Int!
  val: Int!
}

enum CommitType {
  UNKNOWN,
  INITIAL,
  ADD_FILL,
  REMOVE_FILL,
  ADD_NOTE,
  REMOVE_NOTE,
}

type Blob {
  board: [[Cell!]!]!
}

type Cell {
  immutable: Boolean!
  val: Int!
  notes: [Int!]!
}

type RefHead {
  id: ID!
  commitId: ID!
  commit: Commit!
  commits: [Commit!]!
}

type Sudoku {
  refHeadId: ID!
  refHead: RefHead!
  board: [[Int!]!]!
}

scalar Time
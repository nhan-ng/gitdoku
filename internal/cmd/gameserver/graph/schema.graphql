type Query {
  sudoku: Sudoku!
  branch(id: ID!): Branch!
  branches: [Branch!]!
  commit(id: ID!): Commit!
  players: [Player!]!
}

type Mutation {
  addCommit(input: AddCommitInput!): AddCommitPayload
  addBranch(input: AddBranchInput!): AddBranchPayload
  mergeBranch(input: MergeBranchInput!): MergeBranchPayload
  join: JoinPayload
}

input MergeBranchInput {
  sourceBranchId: ID!
  targetBranchId: ID!
  authorId: ID!
}

type Subscription {
  commitAdded(branchId: ID!): Commit!
}

input AddCommitInput {
  branchId: ID!

  type: CommitType!
  row: Int!
  col: Int!
  val: Int
}

type AddCommitPayload {
  commit: Commit
}

type AddBranchPayload {
  branch: Branch
}

type MergeBranchPayload {
  sourceBranch: Branch
}

type JoinPayload {
  player: Player
}

input AddBranchInput {
  id: ID!
  commitId: ID
  branchId: ID
}

type Commit {
  id: ID!
  authorId: ID!
  authorTimestamp: Time!
  parentIds: [ID!]!
  parents: [Commit!]!

  blob: Blob!

  type: CommitType!
  row: Int
  col: Int
  val: Int
}

enum CommitType {
  UNKNOWN,
  INITIAL,
  ADD_FILL,
  REMOVE_FILL,
  TOGGLE_NOTE,
  MERGE,
}

type Blob {
  board: [[Cell!]!]!
}

type Cell {
  immutable: Boolean!
  val: Int!
  notes: [Int!]!
}

type Branch {
  id: ID!
  commitId: ID!
  commit: Commit!
  commits: [Commit!]!
}

type Sudoku {
  branchId: ID!
  branch: Branch!
  board: [[Int!]!]!
}

type Player {
  id: ID!
  displayName: String!
}

scalar Time